C51 COMPILER V9.56.0.0   MAIN                                                              03/31/2018 21:36:22 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "stc15f2k60s2.h"
   2          #include "ds1302.h"
   3          #include "iic.h"
   4          
   5          #define setkeyboard(x) P4=((x&0x80)>>3)|((x&0x40)>>4);P3=x
   6          #define getkeyboard() ((P4&0x10)<<3)|((P4&0x04)<<4)|(P3&0x3f)
   7          
   8          sbit buzzer=P0^6;
   9          sbit relay=P0^4;
  10          bit key_flag,wet_threshold_flag,buzzer_flag,work_state_flag,relay_flag;
  11          float real_wet_value;
  12          unsigned char wet_degree,wet_threshold,read_Eeprom,shi,fen,miao;
  13          unsigned char read_key_value,trg,cont;
  14          unsigned char smg_com[8]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  15          unsigned char smg_duan[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
  16                                  //   0    1    2    3    4    5    6    7    8    9  
  17          unsigned char display[8];
  18          void display1(void);
  19          void display2(void);
  20          
  21          void Read_time()
  22          {
  23   1        shi=Read_Ds1302(0x85);
  24   1        fen=Read_Ds1302(0x83);
  25   1        miao=Read_Ds1302(0x81);
  26   1      }
  27          
  28          void display1(void)
  29          {
  30   1          display[0]=0x40;
  31   1          display[1]=0x40;
  32   1          display[2]=0x00;
  33   1          display[3]=smg_duan[read_Eeprom/10];
  34   1          display[4]=smg_duan[read_Eeprom%10];
  35   1          display[5]=0x00;
  36   1          display[6]=smg_duan[wet_threshold/10];
  37   1          display[7]=smg_duan[wet_threshold%10];      
  38   1      }
  39          void display2(void)
  40            {
  41   1          Write_AT24C02(0x01,wet_threshold);
  42   1          display[0]=smg_duan[fen/16];
  43   1          display[1]=smg_duan[fen%16];
  44   1          display[2]=0x40;
  45   1          display[3]=smg_duan[miao/16];
  46   1          display[4]=smg_duan[miao%16];
  47   1          display[5]=0x00;
  48   1          display[6]=smg_duan[(unsigned char)real_wet_value/10];
  49   1          display[7]=smg_duan[(unsigned char)real_wet_value%10];    
  50   1      
  51   1      }
  52          //-----------------------------------------------
  53          
  54          
C51 COMPILER V9.56.0.0   MAIN                                                              03/31/2018 21:36:22 PAGE 2   

  55          //-----------------------------------------------
  56          
  57          /* Timer0 interrupt routine */
  58          void tm0_isr() interrupt 1 using 1
  59          {
  60   1        static unsigned char key_count;
  61   1        static unsigned char smg_count,i;
  62   1        key_count++;
  63   1        if(key_count==100)
  64   1        {
  65   2          key_count=0;
  66   2          key_flag=1;
  67   2        }
  68   1      
  69   1        smg_count++;
  70   1        if(smg_count==1)
  71   1        {
  72   2          smg_count=0;
  73   2          P2=0xc0;P0=0;P2=0;
  74   2          P2=0xe0;P0=~display[i];P2=0;
  75   2          P2=0xc0;P0=smg_com[i];P2=0;
  76   2          i++;
  77   2          if(i==8)i=0;
  78   2        }  
  79   1      
  80   1      }
  81          
  82          //-----------------------------------------------
  83          void main()
  84          {
  85   1        AUXR |= 0x80;   //?????1T??
  86   1        TMOD &= 0xF0;   //???????
  87   1        TL0 = 0xCD;   //??????
  88   1        TH0 = 0xD4;   //??????
  89   1        TF0 = 0;    //??TF0??
  90   1        TR0 = 1;    //???0????  
  91   1        ET0 = 1;
  92   1        EA = 1;
  93   1        
  94   1        set_sfm(8,30,0);
  95   1        P2=0xa0;buzzer=0;relay=0;P2=0;
  96   1      
  97   1        wet_threshold=50;
  98   1        
  99   1        while(1)
 100   1        {
 101   2          ET0=0;
 102   2          Read_time();
 103   2          read_Eeprom=Read_at24c02(0x01);
 104   2          real_wet_value=Read_adc(0x03)/255.0*99;
 105   2          ET0=1;
 106   2      
 107   2      //    if(work_state==2)   //工作状态
 108   2      //    {
 109   2      //      work_state=0;
 110   2      //    }
 111   2          if(wet_threshold_flag)
 112   2          {
 113   3            display1();
 114   3          }
 115   2          else
 116   2          {
C51 COMPILER V9.56.0.0   MAIN                                                              03/31/2018 21:36:22 PAGE 3   

 117   3            display2();
 118   3          }
 119   2          if(work_state_flag==0)    //自动  L1
 120   2          {
 121   3            P2=0x80;P0=~0x01;P2=0;
 122   3            if(real_wet_value<wet_threshold){ P2=0xa0;relay=1;buzzer=0;P2=0;}
 123   3            else {P2=0xa0;relay=0;buzzer=0;P2=0;}
 124   3          }
 125   2          else                //手动    L2
 126   2          {
 127   3            P2=0x80;P0=~0x02;P2=0;
 128   3      //      P2=0xa0;relay=0;P2=0;
 129   3            if(relay_flag)
 130   3            {
 131   4              P2=0xa0;relay=1;P2=0x00;
 132   4            }
 133   3            else
 134   3            {
 135   4              P2=0xa0;relay=0;P2=0x00;
 136   4            }
 137   3            if(buzzer_flag)
 138   3            {
 139   4              if(real_wet_value<wet_threshold){P2=0xa0;buzzer=1;P2=0;}
 140   4              else {P2=0xa0;buzzer=0;P2=0;}
 141   4            }
 142   3            else
 143   3            {
 144   4              P2=0xa0;buzzer=0;P2=0;
 145   4            }
 146   3          }
 147   2          
 148   2          if(key_flag)
 149   2          {
 150   3            key_flag=0;
 151   3            
 152   3            setkeyboard(0x0f);
 153   3            read_key_value=getkeyboard();
 154   3            setkeyboard(0xf0);
 155   3            read_key_value=(read_key_value|getkeyboard())^0xff;
 156   3            trg = read_key_value&(read_key_value^cont);
 157   3            cont = read_key_value;
 158   3            
 159   3            switch(trg)
 160   3            {
 161   4              case 0x81:work_state_flag=~work_state_flag;break;     //s7
 162   4            }
 163   3            if(work_state_flag==0)        //自动模式
 164   3            {
 165   4              switch(trg)
 166   4              {
 167   5                case 0x88:wet_threshold--;if(wet_threshold==0xff)wet_threshold=99;break;      //s4    
 168   5                case 0x84:wet_threshold++;if(wet_threshold==100)wet_threshold=0;break;      //s5
 169   5                case 0x82:wet_threshold_flag=~wet_threshold_flag;break;     //s6
 170   5                
 171   5                
 172   5              }
 173   4            }
 174   3            if(work_state_flag==1)        //手动模式
 175   3            {
 176   4              switch(trg)
 177   4              {
 178   5                case 0x88:relay_flag=0;break;     //s4    
C51 COMPILER V9.56.0.0   MAIN                                                              03/31/2018 21:36:22 PAGE 4   

 179   5                case 0x84:relay_flag=1;break;     //s5
 180   5                case 0x82:buzzer_flag=~buzzer_flag;break;     //s6
 181   5                
 182   5              }
 183   4            }     
 184   3          }
 185   2        }
 186   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    652    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     42    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
